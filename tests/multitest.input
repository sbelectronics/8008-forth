: clearstack s0 @ dsp! ;

( 0100 ) version prstack

( 0006 ) clearstack 5 1+ prstack

( 000D ) clearstack 11 2+ prstack

( 0004 ) clearstack 5 1- prstack

( 0009 ) clearstack 11 2- prstack

( 0042 ) clearstack 33 2 * prstack

( 0010 ) clearstack 33 2 / prstack

( 0001 ) clearstack 33 2 mod prstack

( 0 1 0 ) clearstack 1 1 < 1 2 < 2 1 < .S

( 0 1 0 ) clearstack 1000 1000 < 1000 2000 < 2000 1000 < .S

( 1 0 0 ) clearstack 1 1 > 1 2 > 2 1 > .S

( 0 1 1 ) clearstack 1 1 <= 1 2 <= 2 1 <= .S

( 1 0 1 ) clearstack 1 1 >= 1 2 >= 2 1 >= .S

( 0 1 ) clearstack 1 1 = 1 2 = .S

( 1 0 ) clearstack 1 1 <> 1 2 <> .S

( 220 ) hex 1234 4321 and U. decimal

( 5335 ) hex 1234 4321 or U. decimal

( 5115 ) hex 1234 4321 xor U. decimal

( EDCB ) hex 1234 invert U. decimal

( 0002 ) clearstack : foo 0 if 001 else 002 then ; foo prstack

( 0001 ) clearstack : bar 1 if 001 else 002 then ; bar prstack

( XXX ) : whiletest 3 BEGIN [ CHAR X ] LITERAL EMIT 1- DUP 0= UNTIL ; whiletest

( X  Y ) : spacestest [ char x ] LITERAL EMIT 2 SPACES [ char y ] LITERAL EMIT ; spacestest

( 5 4 3 2 1 ) clearstack 1 2 3 4 5 .S

( sometext ) s" sometext" tell

( moretext ) clearstack : texttest S" moretext" .S TELL ; texttest

( directtext ) ." directtext"

( directtextfunc ) : directtexttest ." directtextfunc" .S ; directtexttest

( 10 10 ) 10 constant ten ten ten . .

( 15 ) variable foo 15 foo ! foo @ .

( 20 20 ) 20 VALUE VAL VAL VAL . .

( 30 30 ) 30 TO VAL VAL VAL . .

( 0 1 2 3 4 5 6 7 8 9 ) : dotest1 10 0 DO I . LOOP ; dotest1

( 0 2 4 6 8 ) : dotest2 10 0 DO I . 2 +LOOP ; dotest2

( 0 3 6 9 ) : dotest3 10 0 DO I . 3 +LOOP ; dotest3

( 20 19 18 17 16 15 14 13 12 11 10 ) : dotest4 10 20 DO I . -1 +LOOP ; dotest4

( 20 17 14 11 ) : dotest5 10 20 DO I . -3 +LOOP ; dotest5

( -5 -6 -7 -8 -9 -10 ) : dotest6 -10 -5 DO I . -1 +LOOP ; dotest6

( -10 -9 -8 -7 -6 ) : dotest7 -5 -10 DO I . LOOP ; dotest7

words

forget spacestest

words

bye
